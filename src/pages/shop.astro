---
import BaseLayout from '../layouts/BaseLayout.astro';
import productsData from '../../data/products.json';

// Get all products for the bento box showcase
const allProducts = productsData.products;
const categories = productsData.categories;

// Bento size assignment - 4 size types per category (3 of each)
const bentoSizes = ['small-vertical', 'small-vertical', 'small-vertical', 
                   'large-vertical', 'large-vertical', 'large-vertical',
                   'small-horizontal', 'small-horizontal', 'small-horizontal',
                   'large-horizontal', 'large-horizontal', 'large-horizontal'];

// Assign bento sizes to products
const productsWithSizes = allProducts.map((product, index) => {
  const categoryProducts = allProducts.filter(p => p.category === product.category);
  const productIndex = categoryProducts.findIndex(p => p.id === product.id);
  const sizeIndex = productIndex % 12; // Cycle through the 12 size assignments
  
  return {
    ...product,
    bentoSize: bentoSizes[sizeIndex]
  };
});
---

<BaseLayout title="Shop - Hearth & Harrow" description="Explore our mystical collections of herbs, crystals, and divination tools">
  <!-- Hero Section -->
  <section class="shop-hero">
    <div class="container">
      <div class="hero-content">
        <h1>Sacred Marketplace</h1>
        <p>Discover authentic tools and supplies for your spiritual practice</p>
      </div>
    </div>
  </section>

  <!-- Category Grid -->
  <section class="shop-categories">
    <div class="container">
      <div class="categories-grid">
        {categories.map(category => {
          const categoryProducts = productsData.products.filter(p => p.category === category.id);
          return (
            <button class="category-card mystical-card large-card" data-filter={category.id}>
              <div class={`card-background ${category.id}-bg`}></div>
              <div class="card-content">
                <div class="card-icon">{category.icon}</div>
                <h2>{category.name}</h2>
                <p>{category.description}</p>
                <span class="item-count">{categoryProducts.length} Items</span>
              </div>
            </button>
          );
        })}
      </div>
    </div>
  </section>

  <!-- Featured Products -->
  <section class="featured-products">
    <div class="container">
      <h2 class="scroll-animate" id="featured-treasures" data-animation="bounceInUp" data-delay="0">Featured Treasures</h2>
      
      <!-- Filter Buttons -->
      <div class="filter-buttons">
        <button class="filter-btn active scroll-animate" data-filter="all" data-animation="bounceInLeft" data-delay="0">All Products</button>
        <button class="filter-btn scroll-animate" data-filter="herbs-resins" data-animation="bounceInLeft" data-delay="350">Herbs & Resins</button>
        <button class="filter-btn scroll-animate" data-filter="crystals" data-animation="bounceInRight" data-delay="0">Crystals</button>
        <button class="filter-btn scroll-animate" data-filter="divination" data-animation="bounceInRight" data-delay="350">Divination</button>
      </div>

      <!-- Products Bento Grid -->
      <div class="products-bento-grid" id="products-grid">
        {productsWithSizes.map(product => {
          const categoryName = categories.find(c => c.id === product.category)?.name || product.category;
          return (
            <div class={`product-card bento-item bento-${product.bentoSize} scroll-animate`} data-category={product.category} data-bento-size={product.bentoSize} data-animation="gentleBounceIn" data-delay="0">
              <div class="product-image">
                <div class={`product-placeholder ${product.placeholder}`}></div>
              </div>
              <div class="product-info">
                <h3>{product.name}</h3>
                <div class="price-button-container">
                <p class="product-category">{categoryName}</p>
                  <p class="product-price">${product.price}</p>
                </div>
                  <button class="add-to-cart-btn" data-product={product.name} data-price={product.price.toString()}>Add to Cart</button>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  </section>

  <!-- Shopping Cart -->
  <div id="shopping-cart" class="shopping-cart">
    <div class="cart-header">
      <h3>Sacred Cart</h3>
      <button id="close-cart" class="close-cart">Ã—</button>
    </div>
    <div class="cart-items" id="cart-items">
      <p class="empty-cart">Your cart is empty</p>
    </div>
    <div class="cart-footer">
      <div class="cart-total">
        <strong>Total: $<span id="cart-total">0.00</span></strong>
      </div>
      <button id="checkout-btn" class="checkout-btn">Proceed to Checkout</button>
    </div>
  </div>

  <!-- Cart Toggle Button -->
  <button id="cart-toggle" class="cart-toggle">
    <div class="shopping-icon"><i class="fas fa-basket-shopping"></i></div>
     <span id="cart-count">0</span>
  </button>
</BaseLayout>

<style lang="scss">
  @import '../styles/global.scss';

  .shop-hero {
    padding: 8rem 0 4rem;
    background: var(--mystical-gradient);
    text-align: center;
  }

  .hero-content h1 {
    font-size: 3.5rem;
    margin-bottom: 1rem;
  }

  .hero-content p {
    font-size: 1.3rem;
    color: var(--sage-green);
  }

  .shop-categories {
    padding: 6rem 0;
  }

  .categories-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .large-card {
    position: relative;
    min-height: 300px;
    padding: 3rem;
    overflow: hidden;
    text-decoration: none;
    color: var(--pure-white);
    background: var(--crayola-purple);
    border-radius: 15px;
    border: none;
    width: 100%;
    cursor: pointer;
    text-align: left;
    transition: all 0.3s ease;
  }

  .large-card:hover {
    color: var(--pure-white);
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  }

  .card-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0.1;
    transition: opacity 0.3s ease;
  }

  .large-card:hover .card-background {
    opacity: 0.2;
  }

  .herbs-resins-bg {
    background: radial-gradient(circle, var(--crayola-green), transparent);
  }

  .crystals-bg {
    background: radial-gradient(circle, var(--crayola-purple), transparent);
  }

  .divination-bg {
    background: radial-gradient(circle, var(--crayola-blue), transparent);
  }

  .ritual-bg {
    background: radial-gradient(circle, var(--muted-gold), transparent);
  }

  .card-content {
    position: relative;
    z-index: 2;
  }

  .card-content .card-icon {
    font-size: 4rem;
    margin-bottom: 1.5rem;
    display: block;
  }

  .card-content h2 {
    margin-bottom: 1rem;
    font-size: 2rem;
    color: var(--pure-white) !important;
    background: none !important;
    -webkit-background-clip: initial !important;
    -webkit-text-fill-color: var(--pure-white) !important;
    background-clip: initial !important;
  }

  .card-content p {
    margin-bottom: 2rem;
    font-size: 1.1rem;
    line-height: 1.6;
    color: var(--pure-white);
  }

  .item-count {
    color: var(--pure-white);
    font-weight: 500;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .featured-products {
    padding: 6rem 0;
    background: var(--crayola-purple);
  }

  .featured-products h2 {
    text-align: center;
    margin-bottom: 4rem;
    font-size: 3rem;
    color: var(--pure-white) !important;
    background: none !important;
    -webkit-background-clip: initial !important;
    -webkit-text-fill-color: var(--pure-white) !important;
    background-clip: initial !important;
  }

  // Filter Buttons
  .filter-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 3rem;
    flex-wrap: wrap;
  }

  .filter-btn {
    padding: 0.75rem 1.5rem;
    background: transparent;
    border: 2px solid var(--crayola-orange);
    color: var(--light-gray);
    border-radius: 50px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
  }

  .filter-btn:hover,
  .filter-btn.active {
    background: var(--crayola-orange);
    color: var(--pure-white);
    transform: translateY(-2px);
  }

  // Bento Box Flexbox System
  .products-bento-grid {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-start;
    justify-content: center;
    gap: 1rem;
    padding: 1rem 0;
    min-height: 60vh;
  }

  .product-card {
    background: var(--pure-white);
    border-radius: 24px;
    overflow: hidden;
    border: 1px solid rgba(168, 85, 247, 0.05);
    box-shadow: var(--shadow-soft);
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    position: relative;
    transform-origin: center;
    flex-shrink: 0;
  }

  // Bento Card Sizes (Base: 200px unit)
  .bento-small-vertical {
    width: 200px;
    height: 320px;
  }
  
  .bento-large-vertical {
    width: 240px;
    height: 380px;
  }
  
  .bento-small-horizontal {
    width: 320px;
    height: 200px;
  }
  
  .bento-large-horizontal {
    width: 380px;
    height: 240px;
  }

  // Adjust product-image height based on card orientation
  .bento-small-horizontal .product-image,
  .bento-large-horizontal .product-image {
    height: 90px;
  }
  
  .bento-small-vertical .product-image,
  .bento-large-vertical .product-image {
    height: 160px;
  }

  .product-card:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: var(--shadow-colored);
    border-color: var(--crayola-purple);
  }

  .product-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--rainbow-gradient);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .product-card:hover::before {
    opacity: 1;
  }

  // Filter animation states for Bento layout
  .product-card.hidden {
    opacity: 0;
    transform: scale(0.1);
    width: 0;
    height: 0;
    margin: 0;
    padding: 0;
    border: none;
    pointer-events: none;
    overflow: hidden;
  }

  .product-card.visible {
    opacity: 1;
    transform: scale(1);
    pointer-events: all;
  }

  .product-image {
    height: 200px;
    position: relative;
    overflow: hidden;
  }

  .product-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  // 36 Simple Color Swatches for Products
  .sage-placeholder { background: #8FBC8F; }
  .amethyst-placeholder { background: #9966CC; }
  .tarot-placeholder { background: #4B0082; }
  .pendant-placeholder { background: #DAA520; }
  .frankincense-placeholder { background: #D2B48C; }
  .quartz-placeholder { background: #F5F5F5; }
  .lavender-placeholder { background: #E6E6FA; }
  .dragons-blood-placeholder { background: #8B0000; }
  .palo-santo-placeholder { background: #DEB887; }
  .mugwort-placeholder { background: #9ACD32; }
  .copal-placeholder { background: #FFD700; }
  .cedar-placeholder { background: #A0522D; }
  .rose-placeholder { background: #FFB6C1; }
  .myrrh-placeholder { background: #CD853F; }
  .juniper-placeholder { background: #708090; }
  .benzoin-placeholder { background: #F5DEB3; }
  .rose-quartz-placeholder { background: #F8BBD9; }
  .tourmaline-placeholder { background: #2F4F4F; }
  .selenite-placeholder { background: #FFFAFA; }
  .labradorite-placeholder { background: #4682B4; }
  .citrine-placeholder { background: #FFA500; }
  .moonstone-placeholder { background: #F0F8FF; }
  .hematite-placeholder { background: #696969; }
  .garnet-placeholder { background: #DC143C; }
  .fluorite-placeholder { background: #90EE90; }
  .obsidian-placeholder { background: #000000; }
  .crystal-ball-placeholder { background: #E6E6FA; }
  .runes-placeholder { background: #D2691E; }
  .chalice-placeholder { background: #B8860B; }
  .wand-placeholder { background: #CD853F; }
  .cauldron-placeholder { background: #2F2F2F; }
  .oracle-placeholder { background: #191970; }
  .pendulum-placeholder { background: #DDA0DD; }
  .athame-placeholder { background: #C0C0C0; }
  .goddess-placeholder { background: #DEB887; }
  .cloth-placeholder { background: #4B0082; }

  .product-info {
    padding: 0.5rem;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: calc(100% - 180px); // Subtract image height for vertical cards
  }

  .product-info h3 {
    margin-bottom: 0.4rem;
    color: var(--muted-gold);
    font-size: 1rem;
    line-height: 1.2;
    font-weight: 600;
  }

  .product-category {
    color: var(--sage-green);
    font-size: 0.5rem;
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .price-button-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 0.5rem;
    margin-top: auto; // Push to bottom
  }

  .product-price {
    font-size: .6rem;
    font-weight: 600;
    color: var(--muted-gold);
    margin: 0;
    flex-shrink: 0;
  }

  .add-to-cart-btn {
    flex: 0 0 auto;
    display: inline-block;
    padding: 0.875rem 1.5rem;
    background: var(--crayola-green);
    color: var(--pure-white);
    border: none;
    border-radius: 50px;
    font-weight: 600;
    text-transform: none;
    font-size: 0.65rem;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    position: relative;
    overflow: hidden;
    box-shadow: var(--shadow-medium);
    white-space: nowrap;
    text-decoration: none;
  }

  // Content adjustments for horizontal cards
  .bento-small-horizontal .product-info,
  .bento-large-horizontal .product-info {
    height: calc(100% - 120px); // Subtract image height for horizontal cards
    padding: 0.4rem;
  }

  .bento-small-horizontal .product-info h3,
  .bento-large-horizontal .product-info h3 {
    font-size: 0.85rem;
    margin-bottom: 0.2rem;
  }

  .bento-small-horizontal .product-category,
  .bento-large-horizontal .product-category {
    font-size: 0.6rem;
    margin-bottom: 0.3rem;
  }

  .bento-small-horizontal .product-price,
  .bento-large-horizontal .product-price {
    font-size: 0.9rem;
  }

  .bento-small-horizontal .add-to-cart-btn,
  .bento-large-horizontal .add-to-cart-btn {
    padding: 0.6rem 1.2rem;
    font-size: 0.6rem;
  }

  // Shimmer effect for Add to Cart buttons
  .add-to-cart-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    transition: left 0.6s ease;
  }

  .add-to-cart-btn:hover {
    background: var(--peaceful-green);
    color: var(--text-gray);
    box-shadow: var(--shadow-colored);
  }

  .add-to-cart-btn:hover::before {
    left: 100%;
  }

  // Shopping Cart Styles
  .shopping-cart {
    position: fixed;
    top: 0;
    right: -400px;
    width: 400px;
    height: 100vh;
    background: var(--light-gray);
    border-left: 2px solid var(--muted-gold);
    z-index: 2000;
    transition: right 0.3s ease;
    display: flex;
    flex-direction: column;
  }

  .shopping-cart.open {
    right: 0;
  }

  .cart-header {
    padding: 2rem;
    border-bottom: 1px solid rgba(184, 148, 95, 0.3);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .cart-header h3 {
    color: var(--muted-gold);
    font-family: 'Playfair Display', serif;
    margin: 0;
  }

  .close-cart {
    background: none;
    border: none;
    color: var(--muted-gold);
    font-size: 2rem;
    cursor: pointer;
    line-height: 1;
  }

  .cart-items {
    flex: 1;
    padding: 1rem 2rem;
    overflow-y: auto;
  }

  .empty-cart {
    text-align: center;
    color: var(--sage-green);
    font-style: italic;
    margin-top: 2rem;
  }

  .cart-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0;
    border-bottom: 1px solid rgba(184, 148, 95, 0.2);
  }

  .cart-item:last-child {
    border-bottom: none;
  }

  .item-info h4 {
    color: var(--muted-gold);
    margin-bottom: 0.5rem;
    font-size: 1.1rem;
  }

  .item-price {
    color: var(--sage-green);
    font-weight: 500;
  }

  .remove-item {
    background: none;
    border: none;
    color: #ff6b6b;
    cursor: pointer;
    font-size: 1.2rem;
    padding: 0.5rem;
  }

  .cart-footer {
    padding: 2rem;
    border-top: 1px solid rgba(184, 148, 95, 0.3);
  }

  .cart-total {
    text-align: center;
    margin-bottom: 1.5rem;
    font-size: 1.3rem;
    color: var(--muted-gold);
  }

  .checkout-btn {
    width: 100%;
    display: inline-block;
    padding: 0.875rem 2.5rem;
    background: var(--crayola-green);
    color: var(--pure-white);
    border: none;
    border-radius: 50px;
    font-weight: 600;
    text-transform: none;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    position: relative;
    overflow: hidden;
    box-shadow: var(--shadow-medium);
    text-decoration: none;
  }

  // Shimmer effect for Checkout button
  .checkout-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    transition: left 0.6s ease;
  }

  .checkout-btn:hover {
    background: var(--peaceful-green);
    color: var(--text-gray);
    box-shadow: var(--shadow-colored);
  }

  .checkout-btn:hover::before {
    left: 100%;
  }

  .cart-toggle {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background: var(--ethereal-gradient);
    color: var(--moonlight-silver);
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    z-index: 1500;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
  }

  .cart-toggle:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 30px rgba(184, 148, 95, 0.4);
  }

  #cart-count {
    background: #ff6b6b;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.8rem;
    font-weight: bold;
    position: absolute;
    top: -5px;
    right: -5px;
  }

  @media (max-width: 768px) {
    .categories-grid {
      grid-template-columns: 1fr;
    }

    // Mobile Bento Card Sizes (Smaller base unit)
    .bento-small-vertical, .bento-large-vertical {
      width: 160px;
      height: 240px;
    }
    
    .bento-small-horizontal, .bento-large-horizontal {
      width: 240px;
      height: 160px;
    }

    .bento-small-horizontal .product-image,
    .bento-large-horizontal .product-image {
      height: 100px;
    }
    
    .bento-small-vertical .product-image,
    .bento-large-vertical .product-image {
      height: 140px;
    }

    .products-bento-grid {
      justify-content: center;
      gap: 0.75rem;
    }

    // Mobile content scaling
    .product-info {
      padding: 0.4rem;
      height: calc(100% - 140px); // Adjust for mobile image heights
    }

    .product-info h3 {
      font-size: 0.8rem;
      margin-bottom: 0.25rem;
    }

    .product-category {
      font-size: 0.55rem;
      margin-bottom: 0.3rem;
    }

    .product-price {
      font-size: 0.85rem;
    }

    .add-to-cart-btn {
      padding: 0.6rem 1.2rem;
      font-size: 0.6rem;
    }

    .bento-small-horizontal .product-info,
    .bento-large-horizontal .product-info {
      height: calc(100% - 100px);
      padding: 0.35rem;
    }

    .bento-small-horizontal .product-info h3,
    .bento-large-horizontal .product-info h3 {
      font-size: 0.75rem;
    }

    .bento-small-horizontal .product-price,
    .bento-large-horizontal .product-price {
      font-size: 0.8rem;
    }

    .shopping-cart {
      width: 100%;
      right: -100%;
    }

    .shopping-icon i {
        color: var(--crayola-green);
    }

    .hero-content h1 {
      font-size: 2.5rem;
    }
  }
</style>

<script>
  // Import GSAP for smooth animations
  import { gsap } from 'gsap';

  // Shopping Cart Functionality
  interface CartItem {
    name: string;
    price: number;
  }
  
  let cart: CartItem[] = [];
  let cartTotal = 0;

  function updateCartDisplay() {
    const cartItems = document.getElementById('cart-items');
    const cartCount = document.getElementById('cart-count');
    const cartTotalElement = document.getElementById('cart-total');

    if (!cartItems || !cartCount || !cartTotalElement) return;

    if (cart.length === 0) {
      cartItems.innerHTML = '<p class="empty-cart">Your cart is empty</p>';
      cartCount.textContent = '0';
      cartTotalElement.textContent = '0.00';
    } else {
      cartItems.innerHTML = cart.map((item, index) => `
        <div class="cart-item">
          <div class="item-info">
            <h4>${item.name}</h4>
            <p class="item-price">$${item.price}</p>
          </div>
          <button class="remove-item" data-index="${index}">Ã—</button>
        </div>
      `).join('');
      
      // Add event listeners to remove buttons
      const removeButtons = cartItems.querySelectorAll('.remove-item');
      removeButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const index = parseInt(target.getAttribute('data-index') || '0');
          removeFromCart(index);
        });
      });
      
      cartCount.textContent = cart.length.toString();
      cartTotalElement.textContent = cartTotal.toFixed(2);
    }
  }

  function addToCart(productName: string, price: string) {
    cart.push({ name: productName, price: parseFloat(price) });
    cartTotal += parseFloat(price);
    updateCartDisplay();
    
    // Cart only opens via cart-toggle button - removed auto-opening behavior
  }

  function removeFromCart(index: number) {
    if (index >= 0 && index < cart.length) {
      cartTotal -= cart[index].price;
      cart.splice(index, 1);
      updateCartDisplay();
    }
  }

  // Remove the global window assignment - using event delegation instead

  // Scroll to Featured Treasures section
  function scrollToFeaturedTreasures() {
    const featuredSection = document.getElementById('featured-treasures');
    if (featuredSection) {
      featuredSection.scrollIntoView({ 
        behavior: 'smooth', 
        block: 'start' 
      });
    }
  }

  // GSAP-powered Product Filtering with smooth animations
  function filterProducts(category: string) {
    const productCards = document.querySelectorAll('.product-card[data-category]');
    const filterButtons = document.querySelectorAll('.filter-btn');
    
    // Update active button
    filterButtons.forEach(btn => btn.classList.remove('active'));
    const targetButton = document.querySelector(`.filter-btn[data-filter="${category}"]`);
    if (targetButton) {
      targetButton.classList.add('active');
    }
    
    // Arrays for visible and hidden cards
    const toShow: Element[] = [];
    const toHide: Element[] = [];
    
    productCards.forEach(card => {
      const productCategory = card.getAttribute('data-category');
      
      if (category === 'all' || productCategory === category) {
        toShow.push(card);
      } else {
        toHide.push(card);
      }
    });

    // Create timeline for smooth filtering
    const tl = gsap.timeline();

    // First, hide cards that need to be hidden
    if (toHide.length > 0) {
      tl.to(toHide, {
        duration: 0.5,
        opacity: 0,
        scale: 0.1,
        ease: "power1.inOut",
        stagger: 0.02,
        onComplete: () => {
          toHide.forEach(card => {
            card.classList.add('hidden');
            card.classList.remove('visible');
            // Clean up dimensions after animation
            gsap.set(card, { width: 0, height: 0, margin: 0, padding: 0 });
          });
        }
      });
    }

    // Then, show cards that need to be visible
    if (toShow.length > 0) {
      // Reset dimensions for cards being shown
      toShow.forEach(card => {
        if (card.classList.contains('hidden')) {
          card.classList.remove('hidden');
          card.classList.add('visible');
          
          // Reset to appropriate size based on bento-size
          const bentoSize = card.getAttribute('data-bento-size');
          let width, height;
          
          if (window.innerWidth <= 768) {
            // Mobile sizes
            switch(bentoSize) {
              case 'small-vertical':
              case 'large-vertical':
                width = 160; height = 240; break;
              case 'small-horizontal':
              case 'large-horizontal':
                width = 240; height = 160; break;
            }
          } else {
            // Desktop sizes
            switch(bentoSize) {
              case 'small-vertical':
                width = 200; height = 320; break;
              case 'large-vertical':
                width = 240; height = 380; break;
              case 'small-horizontal':
                width = 320; height = 200; break;
              case 'large-horizontal':
                width = 380; height = 240; break;
            }
          }
          
          gsap.set(card, { width: width, height: height, opacity: 0, scale: 0.1 });
          gsap.to(card, {
            duration: 0.6,
            opacity: 1,
            scale: 1,
            ease: "power2.out",
            delay: 0.1
          });
        }
      });
    }
  }

  // Event Listeners
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize all products as visible
    document.querySelectorAll('.product-card[data-category]').forEach(card => {
      card.classList.add('visible');
    });

    // Filter button functionality
    document.querySelectorAll('.filter-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const filter = target?.getAttribute('data-filter');
        if (filter) {
          filterProducts(filter);
        }
      });
    });

    // Category card functionality
    document.querySelectorAll('.category-card').forEach(button => {
      button.addEventListener('click', (e) => {
        // Find the closest .category-card element (handles clicks on child elements)
        const categoryCard = (e.target as HTMLElement).closest('.category-card') as HTMLElement;
        const filter = categoryCard?.getAttribute('data-filter');
        if (filter) {
          console.log('Category card clicked:', filter); // Debug log
          // Filter products
          filterProducts(filter);
          // Scroll to featured treasures section
          setTimeout(() => {
            scrollToFeaturedTreasures();
          }, 100); // Small delay to ensure filtering starts first
        }
      });
    });

    // Add to cart buttons
    document.querySelectorAll('.add-to-cart-btn').forEach(button => {
      button.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const productName = target?.getAttribute('data-product');
        const price = target?.getAttribute('data-price');
        if (productName && price) {
          addToCart(productName, price);
        }
      });
    });

    // Cart toggle
    document.getElementById('cart-toggle')?.addEventListener('click', () => {
      document.getElementById('shopping-cart')?.classList.toggle('open');
    });

    // Close cart
    document.getElementById('close-cart')?.addEventListener('click', () => {
      document.getElementById('shopping-cart')?.classList.remove('open');
    });

    // Checkout button
    document.getElementById('checkout-btn')?.addEventListener('click', () => {
      if (cart.length === 0) {
        alert('Your cart is empty!');
        return;
      }

      // Create mystical checkout popup
      const popup = document.createElement('div');
      popup.innerHTML = `
        <div style="
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background: linear-gradient(135deg, #2d5016, #1a2b3d);
          padding: 3rem;
          border-radius: 15px;
          border: 2px solid #b8945f;
          color: #e8e8e8;
          text-align: center;
          z-index: 10000;
          box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
          max-width: 500px;
          animation: mysticalAppear 0.5s ease-out;
        ">
          <h3 style="color: #b8945f; margin-bottom: 1rem; font-family: 'Playfair Display', serif;">
            ðŸŒŸ Order Received ðŸŒŸ
          </h3>
          <p style="margin-bottom: 1rem; line-height: 1.6;">
            Your mystical order of ${cart.length} item(s) totaling $${cartTotal.toFixed(2)} has been received by the cosmic forces.
          </p>
          <p style="margin-bottom: 2rem; line-height: 1.6; font-style: italic; color: #9cae7c;">
            In a real store, this would process your payment and arrange shipping. 
            For now, simply know that your spiritual journey is supported by our authentic offerings.
          </p>
          <button onclick="this.parentElement.parentElement.remove(); cart = []; cartTotal = 0; updateCartDisplay(); document.getElementById('shopping-cart').classList.remove('open');" style="
            background: #b8945f;
            color: #1a1a1a;
            border: none;
            padding: 0.75rem 2rem;
            border-radius: 30px;
            cursor: pointer;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 1px;
          ">
            Continue Shopping
          </button>
        </div>
        <div style="
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.7);
          z-index: 9999;
        " onclick="this.parentElement.remove()"></div>
      `;
      
      document.body.appendChild(popup);
    });
  });

  // Add mystical appear animation if not already present
  if (!document.querySelector('#mystical-animation-styles')) {
    const style = document.createElement('style');
    style.id = 'mystical-animation-styles';
    style.textContent = `
      @keyframes mysticalAppear {
        0% {
          opacity: 0;
          transform: translate(-50%, -50%) scale(0.8);
        }
        100% {
          opacity: 1;
          transform: translate(-50%, -50%) scale(1);
        }
      }
    `;
    document.head.appendChild(style);
  }
</script>